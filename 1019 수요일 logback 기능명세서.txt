10월 19일 수요일
<출석체크>
09:11 문호준, 서선호,  오세영(휴가), 이용수(오후), 차형주(오후), 홍승기(병원-오후), 

<공지사항>
- 브라우저 바로켜지는거
- js validation 체크해제하는거 
둘다 못찾음

<학습목표>
- 게시글 리스트 : 1교시
- 게시글 상세보기 : 2교시
- 게시글 삭제 : 3교시
- 컨트롤러 알러트 메세지 : 3교시
- 로그백을 사용하여 쿼리 출력 : 4교시
	프로젝트 진행할때 로그세팅 공통적으로 끝내고 진행하기!!!! 디버깅이 훨씬 쉬워지기 때문
- 팀회의 및 스프링복습 : 오후
- 기능명세서 가이드 : 7교시

<why, what, who>
그거 왜 만들었죠?
기획자나 사업자가 아니라 개발자이지만, 우리의 개발기술로 무엇을 만들지를 고민의 흔적이 주제에 느껴져야한다.
사람들이 우리 서비스를 쓰는 이유와 돈을 지불하는 이유를 만들어야한다.
	만약 유아용품 플랫폼
	사용자 : 애기     구매자 : 엄마     수익모델 : 수수료, 광고
								구매자에게서 뽑아낼수도있고, 판매자에게서 뽑아낼수도있고, 트래픽을 통한 광고
	그 돈을 내는 사람들이 자기가 낸 돈보다 더 많은 가치를 우리서비스로 부터 받아가야지 지속적인 서비스가 된다.
	지불한 돈보다 더 많은것을 얻어가야된다.
	시장조사.  a앱을 통해서 300원에 ooo를 할수있고,  b제품을 통해서 2000에 aaa를 할수있는데  우리는 뭘해주나
	




학습
배울학(수업). 익힐습(자습).
스스로 갈고닦아야 내것이 된다.
외워야되는것에 시간을쓰지말고 이해해야할것에 시간을 써라.
코딩의 양이 늘어나면 자동으로 외워진다.

스프링에서 썼던 jsp, jstl, el 로 화면개발을 하면 실행할대 무조건 웹서버가 필요했다.
그런데 스프링부트의 thymeleaf는 html5기반의 화면템플릿이 때문에 서버없이 실행하면 
	서버에서 받아올값만 안나오는거지 다 랜더링된다.

WebServer = 프론트간호사 = 정적처리를 담당 = Apache
WAS(Web Application Server) = WebServer가 할수있는것을 모두다 할수있으면서 Application도 실행한다. = 의사 = 동적처리를 담당 = Tomcat

<남은것>
인터셉터, AOP, 트랜잭션
페이징
REST API
댓글 CRUD
파일 업로드 다운로드



<기능명세서>
      슬랙 - 포트폴리오에 예제 올림
명세서 = '분명' 하고 '자세'하게 적은 문서
기능명세서 = 기획자, 디자이너, 개발자가 구현해야될 기능을 '분명' 하고 '자세'하게 적은 문서
원래는 누가 만드는가? 고객(클라이언트). 개발사에게 돈을 지불하는 사람이나 회사와 그 사업을 따온사람이 같이 만드는거.
	고객이 요구사항명세서를 작성하고 기능명세서로 추려내는데 우리는 문서작업의 간소화를 위해 두개를 합칠거다.
정의 : '최종 사용자의 관점'에서 '최종 제품'이 '어떤 모습'이고 '어떻게 동작할건지'를 기술한 문서
	개발자의 관점에서 어떻게 구현할지는 기술하는게 아니다.
	- 구현해야할 기능이 무엇이고, 정상적인 실행은 무엇이고, 비정상적인 실행은 무엇이고, 비정상적이면 어떻게 되고, 정상이면 어떻게 되고
	- 개발자가 개발할때 궁금해할만한 모든 질문에 답을 해놓은 문서
역할 : 소프트웨어 개발의 최종 목표!이자, 책임의 근거, 책임회의 근거.
	로그인기능이 있어야한다  라고만 기능명세서에 있다면, 대용량트래픽, 보안 신경안써도 된다. 기능명세서에 없기때문에 책임질필요가 없다.
	구체적일수록 프로젝트의 성공확률이 높아진다.
	구체적이지 않을수록 설계때 미리 생각한게 아니라, 개발때 그기능을 담당한 개발자가 그때 생각해내야한다.	
	기능명세서가 잘 작성되었다면 그대로 테스트문서로 쓸수있다.
팁, 유의 : 버전관리를 해야한다.
		최대한 쉬운 언어를 사용해야한다.
		카테고리를 잘 나눠서 잘게잘게 쪼개야한다.  단위테스트를 할수있도록
		설계가 바뀌면 명세서도 바꿔줘야한다.(갱신)
		