1013 목요일 
<출석체크>
09:10 김승욱(휴가), 박세웅(오후), 차형주(오후)

<공지사항>
내일 : 남은 2개 블로깅 하고 팀빌딩 시작. 확정은 월요일

<학습목표>
- 페이징
	쓰는이유 : 사업자입장에서는 네트워크, 메모리 비용 절감,
			유저입장에서는 UX증가
	구현방법 : 오라클에서는 ROWNUM,
			MYSQL에서는 TOP, LIMIT
	ROWNUM : 오라클의 가상컬럼. SQL이 실행된 결과에 붙는 '행의 일련번호'
	실행계획 : dbeaver에서는 ctrl shift e
			cost(비용)을 바탕으로 어떻게 쿼리를 실행할지 좋을지 '옵티마이저'가 판단하여 실행계획을 세운다.
			RDBMS엔진의 핵심. 
	HINT : 여러실행계획중 특정 실행계획을 세우도록 개발자가 옵티마이저에게 전달하는 정보.
	index : 색인. 어떤 식별자가 어디에 위치해있는지를 알려주기위한 데이터
		+ pk는 자동으로 인덱스 등록이 된다.
		배열에서도 인덱스배웠다. '값의 위치'를 저장하고있는 데이터
		색인이 있을때의 장점 : (색인에 등록되어 있다면)원하는 데이터를 빠르게 찾을수 있다. => !!!select의 속도향상!!!
		색인이 있을때의 단점 : 색인을 만드는데 노력이 크다. -> 예를들어 스프링책의 mybatis가 p.183
				앞에 몇페이지가 추가되게되면 p.185로 바꿔줘야한다. 그뒤의 모든 인덱스들을 똑같이 증가시켜줘야한다.
				-> !!!select빼고 모든쿼리의 속도 하락!!!
				-> 색인을 바뀐 데이터로 다시 재정렬 해줘야하기 때문에
				페이지수가 늘어난다. 책의 본문이 300페이지라면 색인의 장수로 5페이지정도 들어갈수있다.
		select빼고 모든쿼리가 하락하는것보다 select의 향상이 훨씬 폭발적으로 이뤄지기 때문에 색인을 쓴다.
		색인은 잘못쓰면 오히려 독이된다.
		예) 10페이지짜리 책에 모든키워드들을 색인으로 등록해서 색인페이지가 7페이지가 되어버리면 독
			배보다 배꼽이 더크다.
		예) 스프링책에 mybatis p.5, p.17, p.53, p.183, p.256 이렇게 중복해서 색인이 등록되면 그것도 독


	페이지를 구현하기위해서 필요한정보 = 총글의갯수, 한페이지당 보여줄글의 갯수, 총몇페이지인지(계산결과), 
			현재페이지(이전페이지, 다음페이지를 표시할지말지), 마지막페이지(계산결과)
	
	동적으로 class 추가 (.active)
	사용자의 이벤트에 반응하는 디자인
	
	글 상세조회 후 페이지 번호 유지하면서 목록으로 되돌아오기
		페이지번호를 유지하기위해서는
		글목록페이지에서 상세조회로 넘어갈때 페이지 번호 전달해줘야하고,
		상세조회에서 글목록 페이지로 넘어갈때 페이지 번호 전달해줘야함
	
	todoList 할일 리스트
	못한건 내일의 todoList에 넣고
	해결한건 체크해서 제거
	
	1. 프로젝트 환경세팅 다돼있음. 
	2. 따라하면 되는 가이드 줌. 환경세팅 내컴퓨터도 똑같이 맞춤.
	3. DB테이블, 데이터 이미 다 들어가있음.
	4. DB연결? 특정 설정파일에 아이디, 비번, URL만 치면 접속됨.
	5. 화면 부장, 차장, 과장님이 몇개 만들어서 줌. 어려운거.
		그거보고 나는 쉬운거 만듦
	6. 컨트롤러, 서비스, 매퍼 전부다 어려운거 만들어져있음. 
		나는 그거 보고 쉬운거 만듦.
	
	